#!/bin/bash
################################################################################
# OpenERP-inator, a tool to manage OpenERP server instances
# Author: Daniel Reis, 2013
################################################################################

#fixed parameters: current release version and current user
OEADMIN_VERSION="0.5"
OEADMIN_USER="`whoami`"
color='\e[1;34m'
endColor='\e[0m'

# Detect homedir; defaults to /opt/openerp
# (installed homes always have a 'src' subdirectory)
if [ -d "`dirname $0`/src" ] ; then
    OEADMIN_HOME="$(cd `dirname $0` && pwd)"
else
    OEADMIN_HOME="/opt/openerp"
fi
# '--at' command allows to force the home directory to use
# (for internal use; not meant part of the public interface)
if [ "$1" = "--at" ] ; then
    OEADMIN_HOME="`echo $2 | sed 's/\/$//'`"  # remove trailing slash
    shift 2
fi 


case "$1" in

#--------------------------------------------------
--help)
#--------------------------------------------------

    echo "usage: oetor <command> [<args>]
OpenERP-inator, a tool to manage and test multiple OpenERP server instances.

<fluff> Dominate the entire ERP tri-state area by easilly installing and 
creating an army of OpenERP server instances in your server.</fluff>

For an easy and quick start use:              ./oetor quickstart
To get more help on a specific command type:  ./oetor <command> --help
For the latest code and documentation see:    https://github.com/dreispt/oetor
 

  Setup related commands:

    quickstart        Automatic full installation and create an initial OpenERP instance (needs sudo).
    install           Create directory structure and db role for current user (may need sudo).
    get-dependencies  Install system dependencies and PostgreSQL db server (needs sudo).
    fake-smtp         Launch a debug SMTP server printing to stdout (needs sudo).

  Instance management commands:

    get               Download or update predefined source code sets into the shared repository.
    version           Check versions of source code in shared directory or in an instance.
    create            Create an OpenERP instance.

  Other commands (advanced usage):

    get-src           Retrieve custom defined source code into shared repository (used by 'get').
    update            Update sources under a known VCS to latest revision (used by 'get').


An OpenERP instance is a directory inside oetor's home directory. 
It contains a 'main' subdirectory containing the sources used by it:
server, addons, web and possibly other module directories.
 
It can be started using the 'start' script in the corresponding subdirectory.
Any additional parameters given are passed on to the OpenERP server. 
This can be used to set server options such as '--xmlrpc-port=XXXX' or '--debug'.

The addons path used is automatically calculated by the start script. 
Copying a directory with modules into the subdirectory is all that is needed
to have it added to the server's addons path.
Refer to the 'create' command help for more details.
 

Other useful commands are:

  Create a branch:    cp ./<instance>/main ./<instance>/<branch>
  Remove a branch:    rm ./<instance>/<branch> -R && dropdb <instance>-<branch>
  Run tests:          ./<instance>/<branch>/start --init=<modules> --test-enable --stop-after-init
  Running servers:    ps aux | grep "/openerp-server"
  List databases:     psql -l
"
    ;;


#--------------------------------------------------
install)
#--------------------------------------------------
    # Setup directories
    #  - repo stored in $OEADMIN_HOME (/opt/openerp)
    #  - reexecution safe (nothing is overwritten)
    #  - NOTE: administrator privileges needed
    #--------------------------------------------------

    #== Usage ==
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor install [--virtualenv] [directory]
Creates a home directory structure to host OpenERP server instances.
If no specific directory is specified, it defaults to \"/opt/openerp\".
The current system user will be the owner of the home directory.
Several coexisting homes are supported.

The install is re-execution safe, and will try to:
  - create user group for the home (ex: \"openerp\" for \"/opt/openerp\")
  - to run secure isolated instances, allow current user to impersonate any 
    group's user without password (via /etc/sudoers)
  - create a db role for the current user
  - create the home directory (ex: /opt/openerp) and set it's ACLs
  - update the home's oetor script with the currently executing copy
  - with the --virtualenv option, a shared python virtualenv will be created in 
    subdir \"env/\", to be used by the server instances (experimental)
"; exit 0
    fi

    #== Parse command parameters ==
    shift 1; OE_DIR="$1"
    if [ "$1" = "--virtualenv" ] ; then
        OE_VIRTUALENV="yes"
        shift 1; OE_DIR="$1"
    else
        OE_VIRTUALENV=""
    fi
    if [ -z "$OE_DIR" ] ; then
        OE_DIR="$OEADMIN_HOME"
    fi
    OE_DIR="`echo $OE_DIR | sed 's/\/$//'`"  # remove trailing slash
    echo "Will install into $OE_DIR for user $OEADMIN_USER"

    #== Create linux user and group (needs sudo) ==
    # Create group for this home, having it's dirname (ex: openerp)
    # Current user (whoami) is added to that group
    echo -e "* Creating system and database users (sudo needed)..."
    OEADMIN_NAME="`basename $OE_DIR`"
    sudo groupadd "$OEADMIN_NAME" 2>/dev/null \
      &&  echo -e "* Created user group  $OEADMIN_NAME"
    sudo usermod -a -G "$OEADMIN_NAME" "$OEADMIN_USER" 2>/dev/null

    #== Add installing user to sudoers (needs sudo) ==
    # Needed to allow impersonating other users of the group without requesting password,
    # so that 'start' scripts can run each server instance in an isolated security context
    AddSudoer="$OEADMIN_USER  ALL=(%$OEADMIN_NAME) NOPASSWD: ALL" #note the hardtab before ALL
    if [ -z "`sudo grep -w "$AddSudoer" /etc/sudoers`" ] ; then
        echo "* Adding $OEADMIN_USER to sudoers for group $OEADMIN_NAME..."
        sudo cp /etc/sudoers /etc/sudoers.oetor
        sudo chown "$OEADMIN_USER" /etc/sudoers.oetor && sudo chmod u+w /etc/sudoers.oetor
        #sudo echo -e "$OEADMIN_USER\tALL=(%$OEADMIN_NAME) NOPASSWD: ALL" >> /etc/sudoers.oetor
        sudo echo "$AddSudoer" >> /etc/sudoers.oetor
        sudo chmod u-w /etc/sudoers.oetor && sudo chown root /etc/sudoers.oetor
        sudo visudo -c -s -q -f /etc/sudoers.oetor && sudo cp /etc/sudoers.oetor /etc/sudoers
    fi

    #== Create PostgresSQL generic role for current user (needs sudo) ==
    sudo su -c "createuser --createdb --createrole --no-superuser $OEADMIN_USER" postgres 2>/dev/null \
      && echo "* Created database role $OEADMIN_USER"
 
    #== Create system log directory (not used for now) ==
    #if [ ! -d /var/log$OE_DIR ] ; then
    #    echo -e "* Creating base log directory /var/log$OE_DIR ..."
    #    sudo mkdir -p /var/log$OE_DIR
    #    sudo chown $OEADMIN_USER:$OEADMIN_USER /var/log$OE_DIR
    #fi

    #== Create the Home directory ==
    [ ! -d $OE_DIR ] &&  echo -e "* Creating oetor home $OE_DIR for user $OEADMIN_USER ..."
    sudo mkdir -p $OE_DIR/src
    sudo chown -hR $OEADMIN_USER:$OEADMIN_NAME $OE_DIR

    #== Install (or replace) oetor script ==
    echo -e "* Installing this oetor script to directory $OE_DIR ..."
    cp "$0" $OE_DIR/oetor
    chmod +x $OE_DIR/oetor
    sudo chown $OEADMIN_USER:$OEADMIN_NAME $OE_DIR/oetor

    #== Create shared virtualenv, with required python packages ==
    # TODO(experimental): Setup shared virtualenv
    if [ ! -z "$OE_VIRTUALENV" ] ; then
        # setup virtualenv
        echo "Creating virtualenv at $OE_DIR/env"
        virtualenv --no-site-packages $OE_DIR/env
        source $OE_DIR/env/bin/activate

        #TODO(low), install: allow to use a package requirement file 
        # install pydot pi packages (requires this specific version)
        easy_install -q pyparsing==1.5.7 
        easy_install -q pydot

        # pychart is not on pypi
        pip install -q http://download.gna.org/pychart/PyChart-1.39.tar.gz

        # regular pypi packages
        pip install -q python-dateutil docutils feedparser gdata jinja2 \
            python-ldap pyxslt lxml mako mock python-openid PIL psycopg2 psutil babel \
            reportlab simplejson pytz unittest2 vatnumber \
            vobject pywebdav werkzeug xlwt pyyaml 
        # pip install zsi  # fails!... 
    fi
    ;;


get-dep*)
    #--------------------------------------------------
    # Install Postgres and System dependencies
    #  - tested with Ubuntu 12
    # NOTE: administrator pivilege needed
    #--------------------------------------------------
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor get-dependencies
Install system dependencies and PostgreSQL database server (needs sudo).
"
    fi

    echo -e "---- Installing PostgreSQL ----"
    sudo apt-get install postgresql

    echo -e "---- Installing system packages ----"
    sudo apt-get -y install bzr bzrtools 

    echo -e "---- Installing python packages ----"
    sudo apt-get -y install python-dateutil python-docutils python-feedparser \
    python-gdata python-jinja2 python-ldap python-libxslt1 python-lxml python-mako \
    python-mock python-openid python-psycopg2 python-psutil python-pybabel \
    python-pychart python-pydot python-pyparsing python-reportlab python-simplejson \
    python-tz python-unittest2 python-vatnumber python-vobject python-webdav \
    python-werkzeug python-xlwt python-yaml python-zsi 
    
    # virtualenv: pypi packages system dependencies 
    sudo apt-get -y install python-pip python-virtualenv 
    sudo apt-get -y install python-dev libldap2-dev libsasl2-dev libssl-dev  #python-ldap 
    sudo apt-get -y install libxml2-dev libxslt1-dev  # lxml 
    sudo apt-get -y install postgresql-server-dev-all  # psycopg2 
    echo -e "Done." 
    ;; 


get) 
    if [ "$2" = "--help" ] ; then 
        echo "Usage: oetor get <srcname-version> [--update]
Create a shared source code directory, containing a predefined list of sources.

Avaliable options for <srcname>:
  nightly-<version>    OpenERP nightly build
  openerp-<version>    OpenERP official sources from Launchpad
  ocb-<version>        Community backports from Launchpad

If a destination directory already exists, the download is skipped.
To force it to be updated, use the --update option.
"
        exit 0
    fi
    if [ -z "$2" ] ; then
        echo "Usage: oetor get <srcname-version> [--update]"
        exit 0
    fi

    # Get parameters and verify directory does not exist
    shift 1; SRCNAME="$1"
    shift 1; SRCUPDATE="$1"
    SRCREPO="${SRCNAME%-*}"      # "my-project-7.0" -> "my-project")
    SRCVERSION="${SRCNAME##*-}"  # "my-project-7.0" -> "7.0"
    if [ -z "$SRCVERSION" ] ; then
        echo "No source version detected."
        exit 1
    fi; 

    # Handle predefined source sets, using the get-src command
    case "$SRCREPO" in
        nightly)
            $0 --at $OEADMIN_HOME get-src tgz $SRCUPDATE $SRCNAME \
                http://nightly.openerp.com/$SRCVERSION/nightly/src/openerp-$SRCVERSION-latest.tar.gz server
        ;;
                
        openerp)
            $0 --at $OEADMIN_HOME get-src bzr $SRCUPDATE $SRCNAME \
                https://launchpad.net/~openerp/openobject-server/$SRCVERSION server \
                https://launchpad.net/~openerp/openobject-addons/$SRCVERSION addons \
                https://launchpad.net/~openerp/openerp-web/$SRCVERSION web
        ;;
        
       ocb)
            $0 --at $OEADMIN_HOME get-src bzr $SRCUPDATE $SRCNAME \
                https://launchpad.net/~ocb/ocb-server/$SRCVERSION server \
                https://launchpad.net/~ocb/ocb-addons/$SRCVERSION addons \
                https://launchpad.net/~ocb/ocb-web/$SRCVERSION web
        ;; 

        *)  # if it's not a predefined source, reroute to the get-bzr command
            $0 --at $OEADMIN_HOME get-src bzr $SRCUPDATE $*
        ;;

    esac
    ;;


get-src)
    if [ "$2" = "--help" ] ; then
         echo "Usage: oetor get-src <method> [--update] <srcname> [<url> <dirname>]...
Create a shared source code directory inside the src/ directory, named <srcname>.
Then, using <method>, retrieve each <url> into the subdirectory <dirname>.

Available methods:
  bzr    Use a Bazaar lightweight checkout 
  tgz    Download and extract a .tar.gz file from the url

If src/<srcname> already exists, only missing <dirname>s will be installed.
When using the tgz method, the --update option replaces existing directories
with the downloaded version.
"
        exit 0
    fi
    if [ -z "$4" ] ; then
        echo "Usage: oetor get-src <method> [--update] <srcname> [<url> <dirname>]..."
        exit 0
    fi

    # Check it's a proper home with a src directory
    if [ ! -d "$OEADMIN_HOME/src" ] ; then
        echo "The directory $OEADMIN_HOME is not a proper OpenERP-inator home."
        exit 1
   fi

    # Get parameters and verify directory does not exist
    shift 1; SRCMETHOD="$1"
    if [ "$2" = "--update" ] ; then
        shift 1; SRCUPDATE="$1"
    else
        SRCUPDATE=""
    fi
    shift 1; SRCNAME="$1"
    SRCDIR="$OEADMIN_HOME/src/$SRCNAME"

    # Special case: update versioned sources and exit early
    if [ ! -z "$SRCUPDATE" ] && [ ! "$SRCMETHOD" = "tgz" ] ; then
        $0 --at $OEADMIN_HOME update $SRCDIR
        exit 0
    fi

    # General case: install the provided NAME URL list of sources
    mkdir -p "$SRCDIR"
    shift 1

    # Process list of parameters
    while [ "$2" ] ; do
        URL="$1"
        NAME="$2"
        shift 2
            #--------
            case "$SRCMETHOD" in

                bzr)
                    if [ -d "$SRCDIR/$NAME" ] ; then
                        echo "Directory $SRCDIR/$NAME already exists, skipping ..."
                    else 
                        echo -e "${color}Building '$SRCDIR/$NAME' with checkout from $URL ...${endColor}"
                        rm -rf $SRCDIR/~tmp
                        bzr checkout --lightweight $URL $SRCDIR/~tmp \
                            && mv $SRCDIR/~tmp $SRCDIR/$NAME
                    fi 
                    ;;

                tgz)
                    echo -e "${color}Downloading $URL ...${endColor}"
                    # Download file
                    [ "$SRCUPDATE" = "--update" ] && rm $SRCDIR/$NAME.tar.gz 
                    wget --no-clobber -O $SRCDIR/$NAME.tar.gz $URL 
                    if [ ! $? = 0 ] ; then
                        exit 1
                    else
                        # Extract file to temporary directory
                        echo "Extracting download to $SRCDIR/$NAME ..."
                        rm -rf $SRCDIR/~tmp
                        mkdir -p $SRCDIR/~tmp
                        tar xf $SRCDIR/$NAME.tar.gz --directory=$SRCDIR/~tmp
                        # Copy extracted files to named destination
                        mkdir -p $SRCDIR/$NAME
                        [ "$SRCUPDATE" = "--update" ] && rm -rf $SRCDIR/$NAME/*
                        mv $SRCDIR/~tmp/`ls $SRCDIR/~tmp/`/* $SRCDIR/$NAME
                        rm -rf $SRCDIR/~tmp
                    fi
                    ;;

                *)
                    echo "$SRCMETHOD is invalid."
                    exit 1
                    ;;
            esac
            #--------
    done    
    ;;


update)
    if [ -z "$2" ] ; then
        echo "Usage: oetor update <fullpath1/> [<fullpath2/> ...]" 
        exit 0
    fi
            
    shift 1
    while [ "$1" ] ; 
    do
        REPODIR="`echo $1 | sed 's/\/$//'`"  # removes trailing slash
        if [ ! -d "$REPODIR" ] ; then
            echo "WARNING: $REPODIR not found."
        else
           for DIRNAME in `ls -d "$REPODIR"/*/` ; do
               if [ -d "$DIRNAME".bzr ] ; then
                  echo -e "Updating $DIRNAME..."
                  bzr update "$DIRNAME"
               else
                  echo -e "($DIRNAME not under version control: skipping)"
               fi 
           done
        fi
        shift 1
    done
    ;;


version)
    if [ -z "$2" ] ; then
        echo "oetor version: $OEADMIN_VERSION"
        echo "oetor home: $OEADMIN_HOME"
        echo "Usage: oetor version <fullpath1/> [<fullpath2/> ...]" 
        exit 0
    fi
            
    shift 1
    while [ "$1" ] ; do 
        REPODIR="`echo $1 | sed 's/\/$//'`"  # remove trailing slash
        if [ ! -d "$REPODIR" ] ; then
            echo "WARNING: $REPODIR not found."
        else
            echo -e "Source revision numbers for $REPODIR:"
            for DIRNAME in `ls -d "$REPODIR"/*/` ; do
                printf "%-20s" "`basename "$DIRNAME"`"
                if [ -f "$DIRNAME/PKG-INFO" ] ; then
                    # nightly build
                    grep "^Version" "$DIRNAME/PKG-INFO"
                else
                    bzr revno -q "$DIRNAME"
                fi
            done
        fi
        shift 1
    done
    ;;


fake-smtp)
    sudo python -m smtpd -n -c DebuggingServer localhost:25
    ;;


#--------------------------------------------------
create)
#--------------------------------------------------

    #== Help ==
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor create <name> <src> [<port>] [<fixed-opts>]
Create an OpenERP instance.
Parameters:
    <name>        Name for the instance
    <src>         Source code for the server and addons. 
                  Can be either a dirname (\"nightly-7.0\") 
                  or full path (\"/opt/openerp/src/nightly-7.0\") 
                  Use --no-src if none is to be used.
    <port>        Optional port number for the instance. Defaults to 8069.
    <fixed-opts>  List of additional fixed server options to include in the start script

The create command will try to:
  - create user for the instance, member of this home's group.
  - create instance directory and set it's ACLs.
  - in the instance's \"main/\" subdir:
    - create symlink to home's virtualenv, if available
    - create symlink to the sources directory 
    - create start script and conf file.

The server instance can be started running it's \"start\" script.
This script can be edited, and will not be overwritten by a re-create.
The start script has the following optional parameters:

    <port>        Use this specific port instead.
    -I <dirname>  Initializes (-i) all modules in directory <dirname>.
                  Use with --test-enable to test all modules.
    <other-opts>  Other options to pass to the OpenERP server.
                  For example: --test-enable --stop-after-init
";      exit 0
    fi

    #== Parse parameters ==
    # Check minimun parameters supplied
    if [ -z "$3" ] ; then
        echo "Usage: oetor create <instance> <src-fullpath> [<port>] [<fixed-opts>]"
        exit 0
    fi

    # Get name for the instance
    shift 1;  INSTANCE="$1"

    # Set default branch name
    BRANCHNAME="main"

    # Base directory
    shift 1
    OEBASE="`echo $1 | sed 's/\/$//'`"  # remove trailing slash
    if [ "$OEBASE" = "--no-src" ] ; then
        OEBASE=""
    else
        if [ -d "$OEADMIN_HOME/src/$OEBASE" ] ; then
            OEBASE="$OEADMIN_HOME/src/$OEBASE/"
        else
            if [ -d "`pwd`/$OEBASE" ] ; then
                OEBASE="`pwd`/$OEBASE"
            else
                if [ ! -d "$OEBASE" ] ; then
                    echo "STOPPING: source $OEBASE does not exist."
                    exit 1
                fi
            fi
        fi
        echo "Will use sources at $OEBASE"
    fi

    # Get optional port number    
    shift 1
    PORT="$1"
    if [ -z "$PORT" ] ; then
        PORT=8069
    fi
    
    #--------------------------------------------------
    # - create instance
    #--------------------------------------------------

    OE_DIR="$OEADMIN_HOME/$INSTANCE"
    
    #== Create user and db role for instance ==
    echo "Creating system and database user $INSTANCE (sudo needed)"
    OE_GROUP="`basename $OEADMIN_HOME`"
    sudo useradd -d "$OE_DIR" "$INSTANCE" #2>/dev/null
    sudo usermod -G "$OE_GROUP" -a "$INSTANCE" #2>/dev/null
    sudo -u $OEADMIN_USER createuser --createdb --no-createrole --no-superuser "$INSTANCE" #2>/dev/null

    # Create instance directory
    [ ! -d "$OE_DIR/$BRANCHNAME" ] && echo "* Creating instance directory (sudo needed to change owner)..."
    mkdir -p "$OE_DIR/$BRANCHNAME"
    sudo chown -hR "$INSTANCE" "$OE_DIR"

    # Add virtualenv, if available
    [ -d "$OEADMIN_HOME/env" ] && [ ! -d "$OE_DIR/$BRANCHNAME"/env ] && ln -s $OEADMIN_HOME/env $OE_DIR/$BRANCHNAME/env

    # Create symlink to server source
    if [ ! -z "$OEBASE" ] ; then
        if [ ! -d "$OEBASE" ] ; then
            echo "WARNING: $OEBASE not found."
            exit 1
        else
            echo "* Linking sources ..."
            # for DIRNAME in `cd $OEBASE && ls -d ./*/` ; do
            for DIRNAME in `ls -d "$OEBASE"/*/` ; do
                if [ ! -d "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`" ] ; then
                   if [ "`basename $DIRNAME`" = "web" ] ; then
                       echo -e "  $DIRNAME"addons #-> "$OE_DIR"/"$BRANCHNAME"/"$DIRNAME"
                       ln -s "$DIRNAME"addons "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`"
                   else
                       echo -e "  $DIRNAME" #-> "$OE_DIR"/"$BRANCHNAME"/"$DIRNAME"
                       ln -s "$DIRNAME" "$OE_DIR/$BRANCHNAME/`basename $DIRNAME`"
                   fi
                fi
           done
        fi
    fi

    # Create convenient shortcut for main/start script
    if [ ! -f "$OE_DIR/start" ] ; then
        echo "\`dirname \$0\`/main/start \$*" > "$OE_DIR/start"
        chmod ug+x "$OE_DIR/start"
    fi

    #--------------------------------------------------
    # - create config
    #--------------------------------------------------
    if [ ! -f "$OE_DIR/openerp-server.conf" ] ; then
        echo "* Creating instance config file ..."
        #TODO(low): better conf file
        echo "[options]
; This is the password that allows database operations:
; admin_passwd = admin
db_user = $INSTANCE
db_name = $BRANCHNAME-$INSTANCE
netrpc = False
xmlrpcs = False
log_handler = ['werkzeug:CRITICAL']
" > $OE_DIR/openerp-server.conf
    fi
    
    shift 1
    if [ ! -f "$OE_DIR/$BRANCHNAME/start" ] ; then
        echo "#!/bin/bash
# Generated by oetor $OEADMIN_VERSION
# Prepare server parameters
INSTANCEPATH=\$(cd \`dirname \$0\` && pwd) 
SERVERPATH=\"\$INSTANCEPATH/server/openerp-server\"
BRANCHNAME=\"\`basename \$INSTANCEPATH\`\"
INSTANCENAME=\"\`basename \$(dirname \$INSTANCEPATH)\`\"
DBNAME=\"\$INSTANCENAME\"-\"\$BRANCHNAME\"
ADDONSPATH=\"\`ls -d1 \$INSTANCEPATH/*/ | grep -v '/server/$' | grep -v '/env/$' | awk -vORS=, '{print \$1}' | sed 's/\/,/,/g'\`\$INSTANCEPATH/server/openerp/addons\"
# Process parameters
OEPORT="$PORT" ; [ ! -z \$1 ] && [[ ! \$1 == -* ]] && OEPORT=\$1 && shift 1 
MODULES=""
if [ \"\$1\" = \"-I\" ] ; then 
    MODULES=\"\`ls -d1 \$INSTANCEPATH/\$2/*/ | xargs -I file basename file | tr '\n' ','\`\"
    MODULES=\"--init=\${MODULES%?}\" # remove trailing comma
    shift 2
fi
# Prepare server database and python environment
sudo -u "\$INSTANCENAME" createdb \"\$DBNAME\" 2>/dev/null || echo \"Created database \$DBNAME\"
[ -d \$INSTANCEPATH/env/bin ] && source \$INSTANCEPATH/env/bin/activate
# Start server
sudo -u "\$INSTANCENAME" \$SERVERPATH --xmlrpc-port=\"\$OEPORT\" -d \"\$DBNAME\" --addons-path=\"\$ADDONSPATH\" \$MODULES $* \$*
" > "$OE_DIR/$BRANCHNAME/start"
        chmod ug+x "$OE_DIR/$BRANCHNAME/start"
        ### --config=\"\$INSTANCEPATH\"/../openerp-server.conf
    fi

    #--------------------------------------------------
    # - DONE with instance
    #--------------------------------------------------
    echo "
Instance \"$INSTANCE\" created configured for port $PORT.
To start it type: $OE_DIR/$BRANCHNAME/start
To use it browse: http://`hostname`:$PORT
"
   ;;


#--------------------------------------------------
clone)
#--------------------------------------------------
    # clone [--test <module>] <instance> [url] [branchname]
    # clone [--testall] <instance> [url] [branchname]

    #== Process parameters ==
    pMODULE=""    # module to test
    pINSTANCE=""  # instance/container 
    pURL=""       # url to fetch source code from
    pSOURCE="main"  # instance subdir to copy from
    pDEST=""      # instance subdir to create or test

    shift 1 
    n=1  # positional parameter counter
    while [ "$1" ] ; do
        case "$1" in
            # option parameters
            --url=*)     pURL="${1:6}" ;;
            --test)     pTEST="$2" ; shift ;;
            --testall)  pTEST="ALL" ;;
            -*)         echo "Invalid option $1." ; exit 1 ;;
            # positional parameters
            *)  case "$n" in
                    1) pINSTANCE="$1" ;;
                    # 2) pURL="$1" ;;
                    2) pDEST="$1" ;;
                esac
                (( n++ ))
        esac
        shift
    done

    # if destination missing, get it from the url 
    [ ! "$pDEST" ] && pDEST="`basename $pURL`"
    # error if mandatory positional parameters are missing
    # [ ! "$pDEST" ] && echo "ERROR: parameters missing." && exit 1

    #== Create new server subdir ==
    pathORIG="$OEADMIN_HOME"/"$pINSTANCE"/"$pSOURCE"
    pathDEST="$OEADMIN_HOME"/"$pINSTANCE"/"$pDEST"
    pathLOG="$OEADMIN_HOME"/"$pINSTANCE"/"$pDEST"/tests.log

    # Create server copy, if it doesn't exist yet
    [ ! -d "$pathDEST" ] \
        && cp -r "$pathORIG" "pathDEST" 
    # Get source code for new server
    if [ "$pURL" ] ; then
        rm -r "$pathDEST"/"$pDEST"
        bzr branch "$pURL" "$pathDEST"/"$pDEST"
    fi
    # Run tests
    if [ "$pTEST" ] ; then
        if [ "$pTEST" == "ALL" ] ; then 
            "$pathDEST"/start -I "$pDEST" --test-enable --stop-after-init | tee "$pathLOG"
        else
            "$pathDEST"/start -i "$pTEST" --test-enable --stop-after-init | tee "$pathLOG"
        fi

        echo "==== DONE ===="
        grep "ERROR" "$pathLOG" --color=auto
    fi
    ;;



#--------------------------------------------------
drop)
#--------------------------------------------------
    # drop <container> <instance>
    # drop <instance path>
    ;;


#--------------------------------------------------
quickstart)
#--------------------------------------------------
    if [ "$2" = "--help" ] ; then
        echo "Usage: oetor quickstart <installdir>
Installs OpenERP-inator and performs an automatic full installation of an
initial OpenERP instance. Requires sudo privilige to perform the system 
installation steps.
If no specific installation directory is provided, '/opt/openerp' will be used.

Equivalent to:
    ./oetor install
    /opt/openerp/oetor get-dependencies
    /opt/openerp/oetor get nightly-7.0
    /opt/openerp/oetor create v7 nightly-7.0
"
    fi

    if [ ! -z "$2" ] ; then
        OEADMIN_HOME="`echo $2 | sed 's/\/$//'`"  # remove trailing slash
    fi
 
    $0 --at "$OEADMIN_HOME" install $2
    $0 get-dependencies 
    $0 --at "$OEADMIN_HOME" get nightly-7.0 
    $0 --at "$OEADMIN_HOME" create v7 nightly-7.0
    ;;


#--------------------------------------------------
*)
#--------------------------------------------------
    if [ ! -z "$1" ] ; then
        echo "Not a valid command."
    fi
    echo "usage: oetor <command> [<args>]
Setup related commands:        install quickstart get-dependencies fake-smtp
Instance management commands:  get version create
Type \`oetor --help\` for more info."
    ;;


esac
exit 0
